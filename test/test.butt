#!/usr/bin/env butt

function take {
  cd "${curdir}" \
    && rm -rf "${1}" \
    && mkdir "${1}" \
    && cd "${1}" \
    || exit 2
}

# make git return only error to stderr
function gch {
  local out
  out="$(git checkout "$@" 2>&1)" \
    || err "${out}"
}

function git_current_branch {
  git rev-parse --abbrev-ref HEAD
}

function gsp {
  git status --porcelain
}

function gref {
  ref="$(git show-ref)"
}

function checkInitRefs {
  assert_equal "$(echo "${ref}" | wc -l)" 5
  assert_contains "${ref}" "refs/heads/dev"
  assert_contains "${ref}" "refs/heads/${1:-main}"
  assert_contains "${ref}" "refs/heads/staging"
  assert_contains "${ref}" "refs/heads/prod-0"
  assert_contains "${ref}" "refs/tags/v0.0.0"
}

function checkInitFiles {
  assert_equal "$(git show dev:VERSION)" "0.1.0"
  assert_equal "$(git show "${1:-main}":VERSION)" "0.0.0"
  assert_equal "$(git show staging:VERSION)" "0.0.0"
  assert_equal "$(git show prod-0:VERSION)" "0.0.0"
  assert_equal "$(head -n1 CHANGELOG.md)" "# Change Log"
}

function grep_log {
  git log --no-color --oneline --decorate --all | grep --quiet "${1}"
}

function load_log {
  log="$(git log --no-color --oneline --decorate --all)"
  IFS=$'\n' read -d '' -r -a loglines <<< "${log}" || return 0
}

export FLOW_OPTIONS=""
export COLUMNS=1000
export MANWIDTH=1000

#local i curdir ref log loglines chglog chgloglines
i=0
curdir="$(pwd)"
ref=
log=
loglines=()
outlines=()
errlines=()
status=

#######################################
## Integration
#######################################
# TODO test flow help on macOs, now it is skipped due to issue https://github.com/InternetGuru/flow/issues/66
: $((i++))
start "flow help"
  take "${i}"
  debug "flow --help"
  assert_equal "${status}" 0
  assert_startwith "${outlines[0]}" "Usage: flow [-"
  assert_startwith "${outlines[1]}" "  -c, --conform"
  debug "flow -n"
  assert_equal "${status}" 3
end
#######################################
: $((i++))
start "flow --version shows version"
  take "${i}"
  debug "flow --version"
  assert_equal "${status}" 0
  assert_startwith "${outlines[0]}" "flow "
  debug "flow -n"
  assert_equal "${status}" 3
end
#######################################
: $((i++))
start "flow -V shows version"
  take "${i}"
  debug "flow -V"
  assert_equal "${status}" 0
  assert_startwith "${outlines[0]}" "flow "
  debug "flow -n"
  assert_equal "${status}" 3
end
#######################################
# : $((i++))
# start "man flow"
#   take "${i}"
#   debug "man 2>/dev/null flow"
#   assert_equal "${status}" 0
#   assert_startwith "${outlines[0]}" "GF(1)"
#   debug "flow -n"
#   assert_equal "${status}" 0
# end
#######################################
## Error codes
#######################################
: $((i++))
start "invalid option error code"
  take "${i}"
  debug "flow --invalid-option"
  assert_equal "${status}" 2
  assert_contains "${errlines[0]}" "unrecognized option"
  debug "flow -n"
  assert_equal "${status}" 3
end
#######################################
: $((i++))
start "missing git error code"
  take "${i}"
  debug "flow"
  assert_equal "${status}" 3
  # shellcheck disable=SC2154
  assert_contains "${errlines[0]}" "Git repository not found."
end
#######################################
: $((i++))
start "missing branch dev error code"
  take "${i}"
  { flow -iy \
    && gch main \
    && git branch -D dev
  } >/dev/null 2>&1
  debug "flow"
  assert_equal "${status}" 3
  assert_contains "${errlines[0]}" "Local branch 'dev' not found."
end
#######################################
: $((i++))
start "missing VERSION file error code"
  take "${i}"
  { flow -iy \
    && rm VERSION \
    && git commit -am "delete VERSION file"
  } >/dev/null
  debug "flow"
  assert_equal "${status}" 3
  assert_contains "${errlines[0]}" "Missing or invalid version file on dev."
end
#######################################
: $((i++))
start "dev is behind main error code"
  take "${i}"
  { flow -iy \
    && echo a > a \
    && git add a \
    && git commit -am "add file a" \
    && flow staging --yes \
    && flow staging --yes \
    && gch dev \
    && git reset --hard HEAD~1
  } >/dev/null
  debug "flow -v"
  assert_equal "${status}" 3
  assert_contains "${errlines[0]}" "Branch 'main' is not merged into 'dev'."
end
#######################################
: $((i++))
start "invalid changelog on dev"
  take "${i}"
  { flow -iy \
    && echo a > CHANGELOG.md \
    && git commit -am "break changelog"
  } >/dev/null
  debug "flow"
  assert_equal "${status}" 3
  assert_contains "${errlines[0]}" "Missing or invalid changelog file on dev."
end
#######################################
: $((i++))
start "uncommitted changes error code"
  take "${i}"
  { flow -iy \
    && echo a > a
  } >/dev/null
  debug "flow"
  assert_equal "${status}" 5
  assert_contains "${errlines[0]}" "Uncommitted changes."
end
#######################################
: $((i++))
start "version change on dev"
  take "${i}"
  { flow -iy \
    && echo 1.0.0 > VERSION \
    && git commit -am "bump version" \
    && flow --yes hotfix a \
    && echo a > a \
    && git add . \
    && git commit -am "fix a"
  } >/dev/null
  debug "echo '' | flow --yes"
  assert_equal "${status}" 0
  load_log
  assert_contains "${log}" "(HEAD -> dev) Merge branch 'main' into dev"
  assert_contains "${log}" "(tag: v0.0.1, staging, prod-0, main) Merge branch 'hotfix-a'"
  assert_contains "${log}" "Merge branch 'main' into dev"
  assert_equal "$(git show main:VERSION)" "0.0.1"
  assert_equal "$(git show staging:VERSION)" "0.0.1"
  assert_equal "$(git show dev:VERSION)" "1.0.0"
  gref
  assert_equal "$(echo "${ref}" | grep /refs/heads/hotfix-a)" ""
  assert_equal "$(gsp)" ""
  debug "flow -n"
  assert_equal "${status}" 0
end
#######################################
## Dry run
#######################################
: $((i++))
start "dry run"
  take "${i}"
  debug "flow --dry-run"
  assert_equal "${status}" 3
  assert_contains "${errlines[0]}" "Git repository not found."
end
#######################################
: $((i++))
start "dry run and invalid option"
  take "${i}"
  debug "flow --dry-run --invalid-option"
  assert_equal "${status}" 2
  assert_contains "${errlines[0]}" "unrecognized option"
end
#######################################
## Init
#######################################
: $((i++))
start "init on empty folder"
  take "${i}"
  debug "flow --init --yes"
  assert_equal "${status}" 0
  checkInitFiles
  gref
  checkInitRefs
  assert_equal "$(gsp)" ""
  debug "flow -n"
  assert_equal "${status}" 0
end
#######################################
: $((i++))
start "init on non-empty folder"
  take "${i}"
  { touch a \
    && touch b
  } >/dev/null
  debug "flow --init --yes"
  assert_equal "${status}" 3
  assert_contains "${errlines[0]}" "Folder is not empty."
end
#######################################
: $((i++))
start "init on non-empty folder with stash"
  take "${i}"
  { touch a \
    && touch b \
    && echo b > .gitignore
  } >/dev/null
  debug "flow --init --yes --stash"
  assert_equal "${status}" 0
  checkInitFiles
  gref
  checkInitRefs
  assert_equal "$(gsp | wc -l)" 2
  debug "flow -n"
  assert_equal "${status}" 5
end
#######################################
: $((i++))
start "init on existing repo with commits"
  take "${i}"
  { git init \
    && echo a > a \
    && git add . \
    && git commit -am "first commit.."
  } >/dev/null
  debug "flow -v --init --yes"
  assert_equal "${status}" 0
  checkInitFiles master
  gref
  checkInitRefs master
  assert_equal "$(gsp)" ""
  debug "flow -n"
  assert_equal "${status}" 0
end
#######################################
: $((i++))
start "init on existing repo uncommitted"
  take "${i}"
  { git init \
    && echo a > a
  } >/dev/null
  debug "flow -v --init --yes"
  assert_equal "${status}" 3
  assert_contains "${errlines[0]}" "Folder is not empty."
end
#######################################
: $((i++))
start "init on existing repo without commits with --stash"
  take "${i}"
  { git init \
    && echo a > a
  } >/dev/null
  debug "flow -v --init --yes --stash"
  assert_equal "${status}" 0
  checkInitFiles master
  gref
  checkInitRefs master
  assert_equal "$(gsp)" "A  a"
  debug "flow -n"
  assert_equal "${status}" 5
end
#######################################
## Conform
#######################################
: $((i++))
start "conform on empty folder"
  take "${i}"
  debug "yes no | flow --conform --yes"
  assert_equal "${status}" 3
  assert_contains "${errlines[0]}" "Git repository not found."
end
#######################################
: $((i++))
start "conform on existing repo without commits"
  take "${i}"
  { git init \
    && echo a > a
  } >/dev/null
  debug "flow --conform --yes"
  assert_equal "${status}" 3
  assert_contains "${errlines[0]}" "Missing initial commit."
end
#######################################
: $((i++))
start "init on existing repo with commits and --stash"
  take "${i}"
  { git init \
    && echo a > a \
    && git add . \
    && git commit -am "first commit" \
    && echo b > b
  } >/dev/null
  debug "flow --init --yes --stash --yes"
  assert_equal "${status}" 0
  checkInitFiles master
  gref
  #checkInitRefs
  assert_equal "$(git_current_branch)" "dev"
  assert_equal "$(gsp | wc -l)" 1
  debug "flow -n"
  assert_equal "${status}" 5
end
#######################################
: $((i++))
start "conform on existing repo with commits and --stash"
  take "${i}"
  { git init \
    && echo a > a \
    && git add . \
    && git commit -am "first commit" \
    && echo b > b
  } >/dev/null
  debug "flow --conform --stash --yes"
  assert_equal "${status}" 0
  checkInitFiles master
  gref
  #checkInitRefs
  assert_equal "$(git_current_branch)" "hotfix-$(whoami)"
  assert_equal "$(gsp | wc -l)" 1
  debug "flow -n"
  assert_equal "${status}" 5
end
#######################################
## Feature
#######################################
: $((i++))
start "create feature"
  take "${i}"
  { flow --init --yes; } >/dev/null
  debug "flow -v --yes"
  assert_equal "${status}" 0
  gref
  assert_contains "${ref}" "refs/heads/feature-$(whoami)"
  assert_equal "$(git_current_branch)" "feature-$(whoami)"
  debug "flow -n"
  assert_equal "${status}" 6
end
#######################################
: $((i++))
start "create feature with uncommited changes and --stash"
  take "${i}"
  { flow --init --yes \
    && echo a > a
  } >/dev/null
  debug "flow -v --yes --stash feature myfeature"
  assert_equal "${status}" 0
  assert_contains "${outlines[0]}" "Stashing files"
  assert_equal "$(git_current_branch)" "feature-myfeature"
  assert_equal "$(gsp)" "A  a"
  debug "flow -n"
  assert_equal "${status}" 5
end
#######################################
: $((i++))
start "merge feature"
  take "${i}"
  { flow --init --yes \
    && flow --yes feature myfeature \
    && echo a > a \
    && git add . \
    && git commit -am "add feature 1"
  } >/dev/null
  debug "echo 'feature1' | flow --yes"
  assert_equal "${status}" 0
  load_log
  assert_contains "${log}" "Update changelog"
  assert_contains "${loglines[0]}" "(HEAD -> dev) Merge branch 'feature-myfeature' into dev"
  gref
  assert_equal "$(echo "${ref}" | grep /refs/heads/feature-myfeature)" ""
  assert_equal "$(git show dev:CHANGELOG.md | head -9 | tail -1)" "### Added"
  assert_equal "$(git show dev:CHANGELOG.md | head -11 | tail -1)" " - feature1"
  assert_equal "$(gsp)" ""
  debug "flow -n"
  assert_equal "${status}" 0
end
#######################################
: $((i++))
start "merge empty feature"
  take "${i}"
  { flow --init --yes \
    && flow --yes feature myfeature
  } >/dev/null
  debug "flow -v --yes"
  assert_equal "${status}" 6
  assert_contains "${errlines[0]}" "Nothing to merge."
end
#######################################
: $((i++))
start "merge feature with uncommitted changes and --stash"
  take "${i}"
  { flow --init --yes \
    && flow --yes feature myfeature \
    && echo a > a \
    && git add . \
    && git commit -am "add feature 1" \
    && echo b > b
  } >/dev/null
  debug "echo 'feature1' | flow --yes --stash"
  assert_equal "${status}" 0
  #assert_contains "${outlines[0]}" "Stashing files"
  load_log
  assert_contains "${log}" "Update changelog"
  assert_contains "${loglines[0]}" "(HEAD -> dev) Merge branch 'feature-myfeature' into dev"
  gref
  assert_equal "$(echo "${ref}" | grep /refs/heads/feature-myfeature)" ""
  assert_equal "$(gsp)" "A  b"
  debug "flow -n"
  assert_equal "${status}" 5
end
#######################################
# start "merge feature with --request"
#   { flow --init --yes \
#     && flow --yes myfeature \
#     && echo a > a \
#     && git add . \
#     && git commit -am "add feature 1"
#   } >/dev/null
#   debug "echo 'feature1' | flow --yes --request"
# fi
#######################################
## RELEASE
#######################################
: $((i++))
start "create staging"
  take "${i}"
  { flow --init --yes \
    && echo a > a \
    && git add . \
    && git commit -m "add file a"
  } >/dev/null
  debug "flow -v --yes staging"
  assert_equal "${status}" 0
  assert_equal "$(git show dev:VERSION)" "0.2.0"
  assert_equal "$(git show staging:VERSION)" "0.1.0"
  assert_equal "$(git show dev:CHANGELOG.md | head -7 | tail -1)" "## [Unreleased]"
  assert_equal "$(git show dev:CHANGELOG.md | head -9 | tail -1)" "## [0.1.0] - RC1"
  assert_equal "$(git show staging:CHANGELOG.md | head -7 | tail -1)" "## [0.1.0] - RC1"
  gref
  assert_contains "${ref}" "refs/heads/staging"
  assert_equal "$(gsp)" ""
  debug "flow -n"
  assert_equal "${status}" 0
end
#######################################
# : $((i++))
# start "try create two stagings"
#   take "${i}"
#   { flow --init --yes \
#     && echo a > a \
#     && git add . \
#     && git commit -m "add file a" \
#     && flow --yes staging \
#     && gch dev \
#     && echo b > b \
#     && git add . \
#     && git commit -m "add file b"
#   } >/dev/null 2>&1
#   debug "flow -v --yes staging"
#   assert_equal "${status}" 0
#   assert_equal "$(git_current_branch)" "staging"
#   assert_equal "$(gsp)" ""
#   debug "flow -n"
#   assert_equal "${status}" 0
# end
#######################################
: $((i++))
start "staging with uncommited changes and --stash"
  take "${i}"
  { flow --init --yes \
    && echo a > a \
    && git add . \
    && git commit -m "add file a" \
    && echo b > b
  } >/dev/null
  debug "flow -v --yes --stash staging"
  assert_equal "${status}" 0
  assert_contains "${outlines[0]}" "Stashing files"
  gref
  assert_contains "${ref}" "refs/heads/staging"
  assert_equal "$(gsp)" "A  b"
  debug "flow -n"
  assert_equal "${status}" 5
end
#######################################
: $((i++))
start "merge staging"
  take "${i}"
  { flow --init --yes \
    && echo a > a \
    && git add . \
    && git commit -m "add file a" \
    && flow --yes staging
  } >/dev/null
  debug "flow -v --yes staging"
  assert_equal "${status}" 0
  assert_equal "$(git show dev:VERSION)" "0.2.0"
  assert_equal "$(git show staging:VERSION)" "0.1.0"
  assert_equal "$(git show main:VERSION)" "0.1.0"
  load_log
  assert_contains "${log}" "(HEAD -> dev) Merge branch 'main' into dev"
  assert_contains "${log}" "(tag: v0.1.0, staging, prod-0, main) Merge branch 'staging'"
  assert_contains "${log}" "Increment minor version on 'dev'"
  gref
  assert_equal "$(echo "${ref}" | grep /refs/heads/staging)" ""
  assert_equal "$(gsp)" ""
  debug "flow -n"
  assert_equal "${status}" 0
end
#######################################
: $((i++))
start "invalid version number"
  take "${i}"
  { flow --init --yes \
    && echo 0.0.0 > VERSION \
    && git commit -am "version"
  } >/dev/null 2>&1
  debug "flow"
  assert_equal "${status}" 3
  assert_contains "${errlines[0]}" "Missing or invalid version file on dev."
end
#######################################
: $((i++))
start "invalid version number --conform"
  take "${i}"
  { flow --init --yes \
    && gch staging \
    && echo 1.0.0 > VERSION \
    && git commit -am "version"
  } >/dev/null 2>&1
  debug "flow --conform --yes"
  assert_equal "${status}" 0
  assert_equal "$(cat VERSION)" "1.1.0"
  debug "flow -n"
  assert_equal "${status}" 0
end
#######################################
: $((i++))
start "unmerged changes on staging"
  take "${i}"
  { flow --init --yes \
    && gch staging \
    && touch a \
    && git add . \
    && git commit -am "a"
  } >/dev/null
  debug "flow --yes staging"
  assert_equal "${status}" 3
  assert_contains "${errlines[0]}" "Missing or invalid version file on staging."
end
#######################################
: $((i++))
start "unmerged changes on staging --conform"
  take "${i}"
  { flow --init --yes \
    && gch staging \
    && touch a \
    && git add . \
    && git commit -am "a"
  } >/dev/null
  debug "flow -cy staging"
  assert_equal "${status}" 0

  debug "flow -n"
  assert_equal "${status}" 0
end
#######################################
# : $((i++))
# start "merge staging with --request"
#  take "${i}"
#   { flow --init --yes \
#     && flow --yes
#   } >/dev/null
#   debug "flow -v --yes --request"
# fi
#######################################
## HOTFIX
#######################################
: $((i++))
start "hotfix main"
  take "${i}"
  { flow -iy; } >/dev/null
  debug "flow -v --yes hotfix myhotfix"
  assert_equal "${status}" 0
  assert_equal "$(git_current_branch)" "hotfix-myhotfix"
  assert_equal "$(gsp)" ""
  debug "flow -n"
  assert_equal "${status}" 6
end
#######################################
# : $((i++))
# start "hotfix prod"
#   take "${i}"
#   { flow -iy; } >/dev/null 2>&1
#   debug "flow --yes hotfix myhotfix"
#   assert_equal "${status}" 0
#   assert_equal "$(git_current_branch)" "hotfix-myhotfix"
#   assert_equal "$(gsp)" ""
#   debug "flow -n"
#   assert_equal "${status}" 0
# end
#######################################
# : $((i++))
# start "hotfix stable by branch name"
#   take "${i}"
#   { flow -iy \
#    && echo a > a \
#    && git add . \
#    && git commit -m "add file a" \
#    && flow --yes staging \
#    && flow --yes staging
#   } >/dev/null 2>&1
#   debug "flow -v --yes hotfix v0.0"
#   assert_equal "${status}" 0
#   load_log
#   assert_equal "$(git_current_branch)" "hotfix-${user}"
#   assert_equal "$(gsp)" ""
#   debug "flow -n"
#   assert_equal "${status}" 0
# end
#######################################
: $((i++))
start "merge main hotfix"
  take "${i}"
  { flow -iy \
   && flow --yes hotfix myhotfix \
   && echo a > a \
   && git add . \
   && git commit -m "add file a";
  } >/dev/null
  debug "echo '' | flow --yes"
  assert_equal "${status}" 0
  load_log
  assert_contains "${loglines[0]}" "(HEAD -> dev) Merge branch 'main' into dev"
  assert_contains "${log}" "(tag: v0.0.1, staging, prod-0, main) Merge branch 'hotfix-myhotfix'"
  assert_equal "$(git show dev:VERSION)" "0.1.0"
  assert_equal "$(git show staging:VERSION)" "0.0.1"
  assert_equal "$(git show main:VERSION)" "0.0.1"
  gref
  assert_equal "$(echo "${ref}" | grep /refs/heads/hotfix-myhotfix)" ""
  assert_equal "$(gsp)" ""
  debug "flow -n"
  assert_equal "${status}" 0
end
#######################################
: $((i++))
start "merge hotfix with unmerged staging"
  take "${i}"
  { flow -iy \
   && flow --yes staging \
   && flow --yes hotfix myhotfix \
   && echo b > b \
   && git add . \
   && git commit -m "add file b"
  } >/dev/null
  # assume conflicts
  debug "echo '' | flow --yes"
  assert_equal "${status}" 0
  load_log
  assert_contains "${loglines[0]}" "(HEAD -> dev) Merge branch 'staging' into dev"
  assert_contains "${log}" "(tag: v0.0.1, prod-0, main) Merge branch 'hotfix-myhotfix'"
  assert_equal "$(git show dev:VERSION)" "0.2.0"
  assert_equal "$(git show staging:VERSION)" "0.1.0"
  assert_equal "$(git show main:VERSION)" "0.0.1"
  gref
  assert_equal "$(echo "${ref}" | grep /refs/heads/hotfix-myhotfix)" ""
  assert_equal "$(gsp)" ""
  debug "flow -n"
  assert_equal "${status}" 0
  debug "flow -n"
  assert_equal "${status}" 0
end
