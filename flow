#!/usr/bin/env bash

shopt -s extglob
set -u

LINES=${LINES:-$(tput lines)}
COLUMNS=${COLUMNS:-$(tput cols)}

FLOW_DATAPATH=${FLOW_DATAPATH:-$(dirname "${BASH_SOURCE[0]}")}
FLOW_USAGE=${FLOW_USAGE:-}
FLOW_VERNUM=${FLOW_VERNUM:-}
FLOW_VERFILE=${FLOW_VERFILE:-${FLOW_DATAPATH}/VERSION}

REPO_CHANGELOG=${REPO_CHANGELOG:-CHANGELOG.md}
REPO_VERFILE=${REPO_VERFILE:-VERSION}
REPO_DEV=${REPO_DEV:-dev}
REPO_STAGING=${REPO_STAGING:-staging}
REPO_STABLE=${REPO_STABLE:-main}
REPO_PROD=${REPO_PROD:-prod}
REPO_ORIGIN=${REPO_ORIGIN:-origin}
REPO_UPSTREAM=${REPO_UPSTREAM:-${REPO_ORIGIN}}
REPO_CHANGELOG_HEADER=${REPO_CHANGELOG_HEADER:-'# Change Log
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](http://keepachangelog.com/)
and this project adheres to [Semantic Versioning](http://semver.org/).'}

function main {

  function msg_start {
    [[ ${verbose} -eq 0 ]] \
      && return
    if stdoutpipe || [[ ${COLUMNS} -lt 41 ]]; then
      echo -n "${1}" \
        && return
    fi
    echo -n '[ '
    save_cursor_position
    echo " ....  ] ${1}"
  }

  function msg_done {
    msg_end "$(colorize ' done ' "${GREEN}")"
  }

  function msg_pass {
    msg_end "$(colorize ' pass ' "${BLUE}")"
  }

  function msg_end {
    [[ ${verbose} -eq 0 ]] \
      && return
    if stdoutpipe || [[ ${COLUMNS} -lt 41 ]]; then
      echo " [ ${1} ]" \
        && return
    fi
    set_cursor_position
    echo "${1}"
  }

  function stdout_silent {
    return
    [[ ${verbose} == 0 ]] && exec 5<&1 && exec 1>/dev/null
  }

  function stdout_verbose {
    return
    [[ ${verbose} == 0 ]] && exec 1<&5
  }

  function err {
    echo "${SCRIPT_NAME}: ${1:-Generic error}" >&2
    [[ "${2:-}" == 2 ]] \
      && echo "${USAGE}" >&2
    [[ "${2:-}" == 3 ]] \
      && echo "${FIXABLE}" >&2
    exit "${2:-1}"
  }

  function setcolor {
    local c
    c=${1:-always}
    case ${c} in
      always|never|auto)
        color=${c}
        return 0
      ;;
    esac
    err 'Unknown color value' 2
  }

  function stdoutpipe {
    readlink /proc/$$/fd/1 | grep -q '^pipe:'
  }

  function colorize {
    [[ ${color} == never ]] \
      && echo -n "${1}" \
      && return
    [[ ${color} == auto ]] \
      && stdoutpipe \
      && echo -n "${1}" \
      && return
    tput setaf "${2:-${GREEN}}"
    echo -n "${1}"
    tput sgr0
  }

  function clear_stdin {
    while read -r -t 0; do read -r; done
  }

  function save_cursor_position {
    local curpos oldstty
    curpos='1;1'
    exec < /dev/tty
    oldstty=$(stty -g)
    stty raw -echo min 0
    echo -en '\033[6n' >/dev/tty
    # shellcheck disable=SC2162
    read -d'R' curpos </dev/tty
    stty "${oldstty}"
    pos_x=$( echo "${curpos#??}" | cut -d';' -f1 )
    pos_y=$( echo "${curpos#??}" | cut -d';' -f2 )
  }

  function set_cursor_position {
    [[ "${pos_x}" == "${LINES}" ]] && : $(( pos_x-- ))
    tput cup $(( pos_x-1 )) $(( pos_y-1 ))
  }

  function confirm {
    [[ ${dry} == 1 ]] \
      && exit
    [[ ${yes} == 1 ]] \
      && return
    if [[ ${is_stdin} == 0 ]]; then
      stdout_verbose
      echo -n "${1:-'Are you sure?'} [YES/No] "
      save_cursor_position
      clear_stdin
      read -r
      [[ -z "${REPLY}" ]] && set_cursor_position && echo 'yes'
      stdout_silent
    else
      read -r
    fi
    [[ "${REPLY,,}" =~ ^y(es)?$ || -z "${REPLY}" ]] \
      && return
    [[ "${REPLY,,}" =~ ^no?$ ]] \
      && exit
    confirm 'Type'
  }

  function git_status_empty {
    [[ -z "$(git status --porcelain)" ]]
  }

  function git_checkout {
    local out
    out="$(git checkout "${@}" 2>&1)" \
      || err "${out}"
  }

  function git_log {
    local out
    out="$(git log "${@}" 2>&1)" \
      || err "${out}"
    echo "${out}"
  }

  function git_init {
    local out
    out="$(git init "${@}" 2>&1)" \
      || err "${out}"
  }

  function git_add {
    local out
    out="$(git add "${@}" 2>&1)" \
      || err "${out}"
  }

  function git_commit {
    local out
    out="$(git commit "${@}" 2>&1)" \
      || err "${out}"
  }

  function git_stash {
    local out
    out="$(git stash "${@}" 2>&1)" \
      || err "${out}"
  }

  function git_fetch {
    local out
    out="$(git fetch --update-head-ok "${@}" 2>&1)" \
      || err "${out}"
  }

  function git_tag {
    local out
    out="$(git tag "${@}" 2>&1)" \
      || err "${out}" >&2
  }

  function git_merge_nocommit {
    env GIT_EDITOR=: git merge --no-commit "${@}" >/dev/null 2>&1
  }

  function git_merge {
    local out
    out="$(env GIT_EDITOR=: git merge "${@}" 2>&1)" \
      || err "${out}"
  }

  function git_show {
    local out
    out="$(git show "${@}" 2>&1)" \
      || err "${out}"
    echo "${out}"
  }

  function git_show_exists {
    git show "${@}" >/dev/null 2>&1
  }

  function latest_commit {
    git rev-parse "${1}"
  }

  function git_rev_list {
    git rev-list -n1 "${1}"
  }

  function git_branch {
    local out
    out="$(git branch "${@}" 2>&1)" \
      || err "${out}"
  }

  function git_branch_format {
    local out
    out="$(git branch --format='%(refname:short)' "${@}" 2>&1)" \
      || err "${out}"
    echo "${out}"
  }

  function git_branch_merged {
    local out
    out="$(git branch --merged "${@}" 2>&1)" \
      || err "${out}"
    echo "${out}"
  }

  function git_push {
    local out
    out="$(git push "${@}" 2>&1)" \
      || err "${out}"
  }

  function checkout_branch {
    msg_start "Creating branch '${1}'"
    local out
    out="$(git_checkout -b "${1}")" \
      || err "${out}"
    msg_done
  }

  function validate_branch {
    branch_exists "${1}" \
      && return
    [[ ${conform} == 0 ]] \
      && err "Local branch '${1}' not found." 3
    confirm "Create branch '${1}'?"
    create_branch "${1}"
  }

  function create_branch {
    branch_exists "${REPO_ORIGIN}/${1}" \
      && git_branch "${1}" "${REPO_ORIGIN}/${1}" \
      && return
    branch_exists "${REPO_STABLE}" \
      && git_branch "${1}" "${REPO_STABLE}" \
      && return
    git_branch "${1}"
  }

  function branch_exists {
    [[ $(git_current_branch) == "${1}" ]] \
     || git_branch_format --all | grep -q -E "^${1}\$"
  }

  function has_tag {
    [[ -n $(git tag --merged "${1}" -l "${2}") ]]
  }

  function git_repo_exists {
    [[ -d .git ]]
  }

  function validate_git_remote {
    git config remote."${REPO_ORIGIN}".url >/dev/null \
      || err "Remote url for '${REPO_ORIGIN}' not found."
  }

  function git_current_branch {
    git_branch_format --show-current
  }

  function stash_files {
    msg_start 'Stashing files'
    git_status_empty \
      && msg_pass \
      && return
    git_add -A
    git_stash push
    stashed=1
    msg_done
  }

  function unstash_files {
    [[ ${stashed} == 0 ]] \
      && return 0
    msg_start 'Unstashing files'
    git_stash pop
    msg_done
  }

  function is_merged_to {
    git_branch_merged "${2}" | grep -q "${1}"
  }

  # merge upwards preserving conflicts
  # merge downwards ignoring VERSION and CHANGELOG conflicts
  # upwards: feature->dev->release->master, hotfix->master
  # downwards: master->release->dev
  function merge_fromto {
    local stream
    stream='upwards'
    [[ "${1}" == "${REPO_STABLE}" || "${2}" == "${REPO_DEV}" ]] \
      && stream='downwards'
    msg_start "Merging '${1}' to '${2}' (${stream})."
    is_merged_to "${1}" "${2}" \
      && msg_pass \
      && return
    git_checkout "${2}"
    git_merge_stream "${1}" "${stream}"
    msg_done
  }

  function git_merge_stream {
    [[ "${2}" == 'upwards' ]] \
      && git_merge --no-ff "${1}" \
      && return
    git_merge_nocommit --no-ff --no-commit "${1}"
    git_checkout --ours "${REPO_VERFILE}"
    #TODO: resolve changelog automatically
    #git_checkout --ours "${REPO_CHANGELOG}"
    git_add .
    git_merge --continue
  }

  function delete_remote_branch {
    msg_start "Deleting remote branch '${1}'"
    ! branch_exists "${REPO_ORIGIN}/${1}" \
      && msg_pass \
      && return
    #TODO: used to be:
    #git push "${REPO_ORIGIN}" ":${REFSHEADS}/${1}" 2>&1
    git push -d "${REPO_ORIGIN}" "${1}"
    msg_done
  }

  function delete_branch {
    [[ "$(git_current_branch)" == "${1}" ]] \
      && err 'Unable to delete checked branch'
    delete_remote_branch "${1}"
    msg_start "Deleting local branch '${1}'"
    git_branch -d "${1}"
    msg_done
  }

  function load_version {
    local branch ver
    branch=${1:-$(git_current_branch)}
    ver=$(git_show "${branch}:${REPO_VERFILE}")
    [[ "${ver}" =~ ^[0-9]+\.[0-9]+\.[0-9]$ ]] \
      || err "Invalid version format on branch '${branch}'." 4
    echo "${ver}"
  }

  # ${1} filepath
  # ${2} default content
  function init_file {
    [[ -f "${1}" && -n "${1}" ]] \
      && return
    [[ ${conform} == 0 ]] \
      && err "Missing or empty file '${1}'." 3
    confirm "Create '${1}' file?"
    echo "${2}" > "${1}" \
      || exit 1
  }

  function parse_version {
    echo "${1}" | sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p'
  }

  function version_gt {
    ! version_lte "${1}" "${2}"
  }

  function version_lte {
    [[ "${1}" == "$(echo -e "${1}\n${2}" | sort -V | head -n1)" ]]
  }

  function validate_requirements {
    local bash_minv git_minv bash_ver git_ver
    bash_minv=3.2
    git_minv=1.8.0
    bash_ver="$(parse_version "$(bash --version 2>/dev/null)")"
    git_ver="$(parse_version "$(git --version 2>/dev/null)")"
    version_lte "${bash_minv}" "${bash_ver}" \
      || err "Required bash version ${bash_minv} or later."
    version_lte "${git_minv}" "${git_ver}" \
      || err "Required git version ${git_minv} or later."
  }

  # 1) validate repository existence
  # 2) validate repository consistency:
  # - at least one commit
  # - master branch
  function validate_repository {
    git_repo_exists \
      && [[ -n "$(git_branch_format)" ]] \
      && return
    [[ ${init} == 0 ]] \
      && ! git_repo_exists \
      && err 'Git repository not found.' 3
    [[ ${init} == 0 ]] \
      && [[ -z "$(git_branch_format)" ]] \
      && err 'Missing initial commit.' 3
    [[ "$(ls -A .)" && "${stash}" == 0 ]] \
      && err 'Folder is not empty.' 3
    msg_start 'Initializing repository'
    # this requires newer git version
    #git_init --initial-branch="${REPO_STABLE}"
    ! git_repo_exists \
      && git_init . \
      && git symbolic-ref HEAD "refs/heads/${REPO_STABLE}"
    git_commit --allow-empty -m 'Initial empty commit'
    msg_done
  }

  function validate_stable_tag {
    local vertag
    vertag="${TAG}$(load_version "${REPO_STABLE}")"
    has_tag "${REPO_STABLE}" "${vertag}" \
      && [[ $(git_rev_list "${REFSTAGS}/${vertag}") == "$(latest_commit "${REPO_STABLE}")" ]] \
      && return
    has_tag "${REPO_STABLE}" "${vertag}" \
      && err "Invalid version tag '${vertag}' commit." 4
    [[ ${conform} == 0 ]] \
      && err "Missing version tag '${vertag}'." 3
    confirm 'Create a version tag?'
    git_tag "${vertag}" "${REPO_STABLE}"
  }

  # 1) validate ${REPO_DEV} branch
  # 2) validate ${REPO_DEV} is up to date with master
  function validate_merged_to {
    is_merged_to "${1}" "${2}" \
      && return
    [[ ${conform} == 0 ]] \
      && err "Branch '${1}' is not merged to '${2}'." 3
    confirm "Merge branch '${1}' to '${2}'?"
    merge_fromto "${1}" "${2}"
  }

  function validate_staging_ver {
    local verm verr
    verm=$(load_version "${REPO_STABLE}")
    verr=$(load_version "${REPO_STAGING}")
    version_gt "${verr%.*}" "${verm%.*}" \
      && validate_merged_to "${REPO_STAGING}" "${REPO_DEV}" \
      && return
    [[ "${verr%.*}" == "${verm%.*}" ]] \
      && validate_attached "${REPO_STAGING}" "${REPO_STABLE}" \
      && return
    [[ ${conform} == 0 ]] \
      && err "Branch '${REPO_STAGING}' version is lower than '${REPO_STABLE}'." 3
    confirm "Update the ${REPO_STAGING} version?"
    update_version "${REPO_STAGING}" "$(increment_version "${verm}" minor)"
  }

  function validate_attached {
    [[ $(git_rev_list "${REFSHEADS}/${1}") == $(git_rev_list "${REFSHEADS}/${2}") ]] \
      || err "Branch '${1}' is detached from '${2}'." 4
  }

  function update_version {
    local gcb
    gcb=$(git_current_branch)
    msg_start 'Updating version number'
    git_checkout "${1}"
    echo "${2}" > "${REPO_VERFILE}"
    git_add "${REPO_VERFILE}"
    git_commit -am 'Update version number'
    msg_done
    git_checkout "${gcb}"
  }

  function validate_dev_ver {
    local verd verr
    verr=$(load_version "${REPO_STAGING}")
    verd=$(load_version "${REPO_DEV}")
    version_gt "${verd%.*}" "${verr%.*}" \
      && return
    [[ ${conform} == 0 ]] \
      && err "Branch '${REPO_DEV}' version is lower or equal to '${REPO_STAGING}'." 3
    confirm "Update the ${REPO_DEV} version?"
    update_version "${REPO_DEV}" "$(increment_version "${verr}" minor)"
  }

  # validate git status
  function validate_status_empty {
    git_status_empty \
      && return
    [[ ${stash} == 1 ]] \
      && stash_files \
      && return
    err 'Uncommitted changes.' 5
  }

  function validate_changelog {
    git_show_exists "${1}:${REPO_CHANGELOG}" \
      && [[ -n $(git_show "${1}:${REPO_CHANGELOG}") ]] \
      && return
    local gcb
    gcb=$(git_current_branch)
    git_checkout "${1}"
    init_file "${REPO_CHANGELOG}" "${REPO_CHANGELOG_HEADER}"
    git_add .
    git_commit -am 'Add changelog file'
    git_checkout "${gcb}"
  }

  function validate_verfile {
    git_show_exists "${1}:${REPO_VERFILE}" \
      && return
    local gcb
    gcb=$(git_current_branch)
    git_checkout "${1}"
    init_file "${REPO_VERFILE}" '0.0.0'
    git_add "${REPO_VERFILE}"
    git_commit -am 'Add version file'
    git_checkout "${gcb}"
  }

  function find_branch_or_first {
    for branch in "${@}"; do
      branch_exists "${branch}" \
        && echo "${branch}" \
        && return
    done
    for branch in "${@}"; do
      branch_exists "${REPO_ORIGIN}/${branch}" \
        && echo "${branch}" \
        && return
    done
    echo "${1}"
  }

  function gf_validate {
    local gcb=${REPO_DEV}
    validate_requirements
    git_repo_exists \
      && gcb=$(git_current_branch)
    validate_repository
    validate_status_empty
    REPO_STABLE=$(find_branch_or_first "${REPO_STABLE}" "${STABLE_ARR[@]}")
    validate_branch "${REPO_STABLE}"
    validate_verfile "${REPO_STABLE}"
    validate_changelog "${REPO_STABLE}"
    validate_stable_tag
    validate_prod_branch
    REPO_STAGING=$(find_branch_or_first "${REPO_STAGING}" "${STAGING_ARR[@]}")
    validate_branch "${REPO_STAGING}"
    validate_verfile "${REPO_STAGING}"
    validate_changelog "${REPO_STAGING}"
    validate_staging_ver
    validate_merged_to "${REPO_STABLE}" "${REPO_STAGING}"
    REPO_DEV=$(find_branch_or_first "${REPO_DEV}" "${DEV_ARR[@]}")
    validate_branch "${REPO_DEV}"
    validate_verfile "${REPO_DEV}"
    validate_changelog "${REPO_DEV}"
    validate_merged_to "${REPO_STABLE}" "${REPO_DEV}"
    validate_dev_ver
    git_checkout "${gcb}"
  }

  function prod_name {
    local ver
    ver="${1:-$(load_version "${REPO_STABLE}")}"
    echo "${REPO_PROD}-${ver%%.*}"
  }

  function validate_prod_branch {
    local prod
    prod=$(prod_name)
    validate_branch "${prod}"
    [[ $(git_rev_list "${REFSHEADS}/${prod}") == $(git_rev_list "${REFSHEADS}/${REPO_STABLE}") ]] \
      && return
    [[ ${conform} == 0 ]] \
      && err "Branch '${prod}' is behind '${REPO_STABLE}'." 3
    confirm "Merge '${prod}' branch into '${REPO_STABLE}'?"
    git_checkout "${prod}"
    git_merge "${REPO_STABLE}"
  }

  function unexpected_argument {
    [[ -n ${1} ]] \
      && err 'Unexpected argument' 2
  }

  # 1 name
  # 2 current branch
  # 3 kw
  function is_releasable {
    [[ -z ${1} && "${2%%-*}" == "${3}" ]] \
      || [[ -n ${1} && "${2}" == "${3}-${1}" ]]
  }

  function get_keyword {
    [[ " ${STABLE_ARR[*]} " == *" ${1} "* ]] \
      && echo "${REPO_STABLE}" \
      && return
    [[ " ${DEV_ARR[*]} " == *" ${1} "* ]] \
      && echo "${REPO_DEV}" \
      && return
    [[ " ${STAGING_ARR[*]} " == *" ${1} "* ]] \
      && echo "${REPO_STAGING}" \
      && return
    echo "${1}"
  }

  function gf_process {
    [[ ${#} -gt 2 ]] \
      && err 'Too many arguments.' 2
    local gcb kw name
    gcb=$(git_current_branch)
    kw=$(get_keyword "${1:-"${gcb%%-*}"}")
    name=${2:-"$(whoami)"}
    git check-ref-format "${REFSHEADS}/${name}" \
      || err "Invalid branch name format '${name}'." 2
    case "${kw,,}" in
      pull|fetch)
        unexpected_argument "${2-}"
        gf_pull
        ;;
      push)
        unexpected_argument "${2-}"
        gf_push
        ;;
      ${HOTFIX}|${REPO_STABLE}|${REPO_PROD})
        is_releasable "${2-}" "${gcb}" "${HOTFIX}" \
          && release_hotfix \
          && return
        checkout_if_exists "${HOTFIX}-${name}" \
          && return
        hotfix_create "${HOTFIX}-${name}"
        ;;
      ${FEATURE}|${REPO_DEV})
        is_releasable "${2-}" "${gcb}" "${FEATURE}" \
          && release_feature \
          && return
        checkout_if_exists "${FEATURE}-${name}" \
          && return
        feature_create "${FEATURE}-${name}"
        ;;
      ${REPO_STAGING})
        unexpected_argument "${2-}"
        [[ "${gcb}" == "${REPO_DEV}" ]] \
          && release_dev \
          && return
        [[ "${gcb}" == "${REPO_STAGING}" ]] \
          && release_staging \
          && return
        checkout_if_exists "${FEATURE}-${name}" \
          && return
        err "Required branch '${REPO_STAGING}' not found."
        ;;
      *)
        err 'Unknown keyword or branch.' 2
        ;;
    esac
  }

  function checkout_if_exists {
    branch_exists "${1}" \
      || return 1
    confirm "* Checkout to branch '${1}'?"
    git_checkout "${1}"
  }

  function release_dev {
    confirm "* Release '${REPO_DEV}' branch?"
    #TODO: technically this check is irrelevant
    is_merged_to "${REPO_STAGING}" "${REPO_DEV}" \
      || err 'Branch already released.' 6
    update_changelog_header
    git_commit -am 'Add changelog header'
    merge_fromto "${REPO_DEV}" "${REPO_STAGING}"
    merge_fromto "${REPO_STAGING}" "${REPO_DEV}"
    increment_version "$(load_version)" minor > "${REPO_VERFILE}"
    git_commit -am 'Increment minor version'
    git_checkout "${REPO_STAGING}"
  }

  function feature_create {
    local feature_name
    feature_name="${1}"
    checkout_if_exists "${feature_name}" \
      && return
    confirm "* Create branch '${feature_name}' from branch '${REPO_DEV}'?"
    checkout_branch "${feature_name}"
  }

  function hotfix_create {
    local gcb source
    gcb=$(git_current_branch)
    source=${REPO_STABLE}
    [[ "${gcb%%-*}" == "${REPO_PROD}" ]] \
      && source=${gcb}
    confirm "* Create hotfix '${1}' from '${source}'?"
    git_checkout "${source}"
    checkout_branch "${1}"
  }

  function release_staging {
    # shellcheck disable=SC2015
    [[ ${request} == 1 ]] \
      && confirm "* Request merge '${REPO_STAGING}' to '${REPO_STABLE}'?" \
      || confirm "* Release '${REPO_STAGING}' branch to '${REPO_STABLE}'?"
    is_merged_to "${REPO_STAGING}" "${REPO_STABLE}" \
      && err 'Branch already released.' 6
    update_changelog_header
    git_commit -am 'Update control files'
    merge_fromto "${REPO_STABLE}" "${REPO_STAGING}"
    [[ ${request} == 1 ]] \
      && gf_request "${REPO_STABLE}" \
      && return
    merge_fromto "${REPO_STAGING}" "${REPO_STABLE}"
    msg_start 'Updating branching structure'
    git_tag "$(load_version)"
    git_checkout "${REPO_STAGING}"
    git_merge "${REPO_STABLE}"
    local prod
    prod=$(prod_name)
    # shellcheck disable=SC2015
    branch_exists "${prod}" \
      && git_checkout "${prod}" \
      && git_merge "${REPO_STABLE}" \
      || git_branch "${prod}"
    msg_done
    merge_fromto "${REPO_STABLE}" "${REPO_DEV}"
  }

  function get_diff_url {
    local url
    url="$(trim_url "$(git config remote."${REPO_ORIGIN}".url)")"
    case "${url}" in
      *"${GITHUB}"*)
        echo "https://${url}/compare/${1}...${2}"
        ;;
      *"${BITBUCKET}"*)
        echo "https://${url}/compare/${2}..${1}"
        ;;
      "")
        return
        ;;
      *)
        err 'Unsupported git remote.'
        ;;
    esac
  }

  function update_changelog_header {
    local header tmpfile diff_url prev_tag ver
    ver=$(load_version)
    msg_start 'Updating changelog header'
    header="## [${ver}] - $(date '+%Y-%m-%d')"
    prev_tag="$(git tag | sort -V | tail -n1 )"
    diff_url="$(get_diff_url "${prev_tag}" "${ver}" )"
    [[ -n "${diff_url}" ]] \
      && diff_url="[${ver}]: ${diff_url}" \
      || diff_url="[${ver}]: ${prev_tag}..${ver}"
    tmpfile="$(mktemp)"
    gawk -v header="${header}" -v diff_url="${diff_url}" '
      BEGIN {
        writemsg=1
        writeurl=1
      }
      /^\[Unreleased\]/ { next }
      writemsg == 1 && /^## / {
        print header
        writemsg=0
        if($0 ~ "^## \\[?Unreleased\\]?") { next }
        print ""
      }
      writeurl == 1 && /^\[/ && ! /^\[Unreleased\]/ {
        print diff_url
        writeurl=0
      }
      {print}
      ENDFILE {
        if(writemsg==1) { print header }
        if(writeurl==1) { print ""; print diff_url }
      }
      ' "${REPO_CHANGELOG}" > "${tmpfile}"
    cat "${tmpfile}" > "${REPO_CHANGELOG}"
    msg_done
  }

  # 1: keyword
  # 2: message
  function add_changelog_entry {
    local tmpfile diff_url
    tmpfile="$(mktemp)"
    diff_url="$(get_diff_url "${REPO_STABLE}" "${REPO_DEV}")"
    [[ -n "${diff_url}" ]] \
      && diff_url="[Unreleased]: ${diff_url}" \
      || diff_url="[Unreleased]: ${REPO_STABLE}..${REPO_DEV}"
    gawk -v keyword="${1}" -v message="${2}" -v diff_url="${diff_url}" \
      -v next_keywords="${CHANGELOG_KEYWORDS#*${1}}" '
      function print_unreleased () { print "## [Unreleased]" }
      function print_keyword () { print "### " keyword }
      function print_message () { print " - " message }
      BEGIN {
        writemsg=1
        unreleased=0
        writeurl=1
      }
      /^## \[?Unreleased\]?/ { unreleased=1 }
      writemsg == 1 && unreleased == 0 && /^## / && ! /^## \[?Unreleased\]?/ {
        print_unreleased()
        print_keyword()
        print_message()
        print ""
        writemsg=0
      }
      writemsg == 1 && $0 ~ "^## " next_keywords && ! /^## \[?Unreleased\]?/ {
        print_keyword()
        print_message()
        print ""
        writemsg=0
      }
      /^\[Unreleased\]/ { writeurl=0 }
      writeurl == 1 && /^\[/ {
        print diff_url
        writeurl=0
      }
      {print}
      writemsg == 1 && $0 == "### " keyword {
        print_message()
        writemsg=0
      }
      ENDFILE {
        if(writemsg == 1) {
          print ""
          if(unreleased == 0) { print_unreleased() }
          print_keyword()
          print_message()
        }
        if(writeurl==1) { print diff_url }
      }
    ' "${REPO_CHANGELOG}" > "${tmpfile}"
    cat "${tmpfile}" > "${REPO_CHANGELOG}"
  }

  # 1: default keyword
  # 2: source branch
  function update_changelog {
    local gcb kw=
    gcb=$(git_current_branch)
    [[ "${entry}" == 1 ]] \
      && add_changelog_entry "${1}" "${gcb}" \
      && return
    stdout_verbose
    echo
    echo '***'
    echo "* Please enter the ${gcb} description for ${REPO_CHANGELOG}."
    echo '*'
    echo '* Supported keywords:'
    echo "*   ${CHANGELOG_KEYWORDS/ ${1} / ${1} (default) }"
    echo '*'
    echo "* Commits of '${gcb}':"
    git_log "${2}".."${gcb}" --pretty=format:'*   %h %s'
    echo '*'
    echo '***'
    # What for?
    REPLY=
    [[ ${is_stdin} == 0 ]] \
      && echo 'Type "Keyword: Message". Empty line to end editting.' \
      && echo "Leave empty (press Enter) for default message: '${1}: ${gcb}'." \
      && clear_stdin
    while read -e -r line; do
      [[ -z "${line}" ]] \
        && break
      history -s "${line}"
      kw="${line%%:*}"
      [[ " ${CHANGELOG_KEYWORDS} " != *" ${kw} "* ]] \
        && kw=${1}
      add_changelog_entry "${kw}" "$(echo "${line#*:}" | xargs)"
    done
    [[ -z "${kw}" ]] \
      && add_changelog_entry "${1}" "${gcb}"
    stdout_silent
  }

  function release_feature {
    local source
    source=$(git_current_branch)
    is_merged_to "${source}" "${REPO_DEV}" \
      && err 'Nothing to merge.' 6
    # shellcheck disable=SC2015
    [[ ${request} == 1 ]] \
      && confirm "* Request merge '${source}' into '${REPO_DEV}'?" \
      || confirm "* Merge '${source}' into '${REPO_DEV}'?"
    merge_fromto "${REPO_DEV}" "${source}"
    update_changelog Added "${REPO_DEV}"
    git_commit -am 'Update changelog'
    [[ ${request} == 1 ]] \
      && gf_request "${REPO_DEV}"
    merge_fromto "${source}" "${REPO_DEV}"
    delete_branch "${source}"
  }

  ### Increments the part of the string
  ## $1: version itself
  ## $2: number of part: major, minor, patch
  function increment_version {
    local major minor patch
    major=$(echo "${1}" | cut -d. -f1)
    minor=$(echo "${1}" | cut -d. -f2)
    patch=$(echo "${1}" | cut -d. -f3)
    case "${2}" in
      major)
        (( major ++ ))
        minor=0
        patch=0
        ;;
      minor)
        (( minor ++ ))
        patch=0
        ;;
      patch)
        (( patch ++ ))
        ;;
      *)
        err 'Invalid version type.'
    esac
    echo "${major}.${minor}.${patch}"
  }

  function release_hotfix {
    local source dest vers verd
    source=$(git_current_branch)
    dest=${REPO_STABLE}
    vers=$(load_version "${source}")
    verd=$(load_version "${REPO_STABLE}")
    [[ "${vers%%.*}" > "${verd%%.*}" ]] \
      && err "Hotfix version is greater than '${REPO_STABLE}'." 4
    [[ "${vers%%.*}" < "${verd%%.*}" ]] \
      && dest="$(prod_name "${vers}")" \
      && verd="$(load_version "${dest}")"
    ! branch_exists "${dest}" \
      && err "Branch '${dest} not found." 4
    is_merged_to "${source}" "${dest}" \
      && err 'Nothing to merge.' 6
    # shellcheck disable=SC2015
    [[ "${dest}" == "${REPO_STABLE}" ]] \
      && confirm '* Release the hotfix?' \
      || confirm "* Obsolete major version. Merge to branch '${dest}'?"
    msg_start 'Updating control files'
    increment_version "${verd}" patch > "${REPO_VERFILE}"
    update_changelog Fixed "${dest}"
    update_changelog_header
    git_commit -am 'Update control files'
    msg_done
    [[ ${request} == 1 ]] \
      && gf_request "${dest}" \
      && return
    merge_fromto "${source}" "${dest}"
    git_tag "$(load_version)"
    [[ "${dest}" != "${REPO_STABLE}" ]] \
      && delete_branch "${source}" \
      && return
    git_checkout "$(prod_name "${verd}")"
    git_merge "${REPO_STABLE}"
    verr=$(load_version "${REPO_STAGING}")
    [[ "${verr%.*}" == "${verd%.*}" ]] \
      && git_checkout "${REPO_STAGING}" \
      && git_merge "${REPO_STABLE}" \
      && merge_fromto "${REPO_STABLE}" "${REPO_DEV}" \
      && delete_branch "${source}" \
      && return
    merge_fromto "${REPO_STABLE}" "${REPO_STAGING}"
    merge_fromto "${REPO_STAGING}" "${REPO_DEV}"
    delete_branch "${source}"
  }

  function gf_pull_branch {
    git_fetch "${REPO_ORIGIN}" "${1}:${1}"
  }

  function gf_pull {
    validate_git_remote
    confirm '* Pull all remote branches?'
    msg_start 'Fetching key branches'
    git_fetch --tags
    gf_pull_branch "${REPO_DEV}"
    gf_pull_branch "${REPO_STABLE}"
    gf_pull_branch "${REPO_STAGING}"
    for prod in $(git_branch_format -r); do
      gf_pull_branch "${prod}"
    done
    msg_done
  }

  function gf_push {
    validate_git_remote
    confirm '* Push key branches to the remote repository?'
    msg_start 'Pushing key branches'
    git_push --tags
    git_push "${REPO_ORIGIN}" "${REPO_DEV}"
    git_push "${REPO_ORIGIN}" "${REPO_STABLE}"
    git_push "${REPO_ORIGIN}" "${REPO_STAGING}"
    for prod in $(git_branch_format | grep "${REPO_PROD}-[0-9]\+"); do
      branch_exists "${prod}" \
        && git_push "${REPO_ORIGIN}" "${prod}"
    done
    msg_done
  }

  function gf_request {
    validate_git_remote
    [[ "${REPO_ORIGIN}" == "${REPO_UPSTREAM}" ]] \
      || git_push "${REPO_ORIGIN}" "${1}"
    git_push "${REPO_ORIGIN}" "${1}"
    gf_request_url "${1}"
  }

  function trim_url {
    local url
    url="${1#https://}"
    echo "${url}" | grep -q ":" \
      && url="${url#*@}" \
      && url="${url/://}" \
      && url="${url/.git/}"
    echo "${url}"
  }

  function gf_request_url {
    local url upstream_url to gcb
    to="${1:-${REPO_DEV}}"
    url=$(trim_url "$(git config remote."${REPO_ORIGIN}".url)")
    upstream_url="$(git config remote."${REPO_UPSTREAM}".url)"
    upstream_url="$(trim_url "${upstream_url}")"
    gcb=$(git_current_branch)
    stdout_verbose
    echo -n 'Pull request URL: '
    case "${url}" in
      *"${GITHUB}"*)
        # shellcheck disable=SC1003
        [[ "${url}" == "${upstream_url}" ]] \
          && echo "https://${url}/compare/${to}...${gcb}?expand=1" \
          || echo "https://${upstream_url}/compare/${to}...$(echo "${url}" | cut -d'/' -f2)%3A${gcb}?expand=1"
      ;;
      *"${BITBUCKET}"*)
        # shellcheck disable=SC1003
        [[ "${url}" == "${upstream_url}" ]] \
          && echo "https://${url}/compare/${gcb}..$(echo "${url}" | cut -d'/' -f2-3)%3A${to}" \
          || echo "https://${url}/compare/${gcb}..$(echo "${upstream_url}" | cut -d'/' -f2-3)%3A${to}"
      ;;
      *)
        err 'Unsupported remote server name.'
      ;;
    esac
    stdout_silent
  }

  function gf_usage {
    local file head tail
    head="$(echo "${FLOW_USAGE:-}" | head -n1)"
    tail="$(echo "${FLOW_USAGE:-}" | tail -n+2)"
    file="${FLOW_DATAPATH}/${SCRIPT_NAME}.usage"
    [[ -z "${head}" ]] \
      && [[ ! -f "${file}" ]] \
      && echo 'Usage is not available in source file.' \
      && return
    [[ -z "${head}" ]] \
      && head="$(head -n1 "${file}")" \
      && tail="$(tail -n+2 "${file}")"
    echo "${head}"
    echo
    local indent=0
    [[ ${COLUMNS} -gt 1 ]] \
      && indent=5 \
      && export MANWIDTH=$(( COLUMNS + indent ))
    echo "${tail}" | man --nj --nh -l - \
      | sed "1,2d;/^[[:space:]]*$/d;\${d};s/^ \{${indent}\}//"
  }

  function gf_version {
    [[ -n "${FLOW_VERNUM}" ]] \
      && echo "flow ${FLOW_VERNUM}" \
      && return
    echo "flow $(<"${FLOW_VERFILE}")"
  }

  function what_now {
    [[ ${#} -gt 0 ]] \
      && err 'Unexpected arguments.' 2
    local gcb kw
    gcb=$(git_current_branch)
    kw=$(get_keyword "${gcb%%-*}")
    stdout_verbose
    echo '***'
    echo "* Currently on '${gcb}'"
    echo '*'
    case ${kw} in
      HEAD)
        echo '* You are detached from branches with no direct git flow action.'
        echo '*'
        echo "* 1. Checkout to an existing branch, e.g. to dev branch."
        ;;
      ${REPO_STABLE}|${REPO_PROD})
        echo '* This is considered a read-only stable branch.'
        echo '* Do not commit any changes directly to this branch ever!'
        echo '*'
        echo "* 1. Run '${SCRIPT_NAME}' to create hotfix or leave."
        ;;
      ${REPO_DEV})
        echo '* This is considered a development branch.'
        echo '* It is designed for bug fixing and merging features.'
        echo '*'
        echo '* 1. Make some fixes and feel free to commit directly.'
        echo "* 2. Run '${SCRIPT_NAME}' to create a new feature."
        echo "* 3. Run '${SCRIPT_NAME} release' to release this branch."
        ;;
      ${REPO_STAGING})
        echo '* This is a staging branch meant solely for bug fixing.'
        echo '* It is also known as a release candidate branch (RC).'
        echo '*'
        echo '* 1. Make some fixes and feel free to commit directly.'
        echo "* 2. Run '${SCRIPT_NAME}' to release this branch."
        ;;
      ${HOTFIX})
        echo '* This is a temporary branch created from a stable branch.'
        echo '* Its purpose is to fix one critical problem and dissolve.'
        echo '* WARNING: Make only minimum necessary changes here!'
        echo '*'
        echo '* 1. Make sure you really HAVE to solve the problem now.'
        echo '* 2. Fix the critical problem and commit changes.'
        echo "* 3. Run '${SCRIPT_NAME}' to merge the hotfix back into stable branch."
        echo '* 4. Good luck.'
        ;;
      ${FEATURE})
        echo '* This is a temporary branch created from the development branch.'
        echo '* Its purpose is to create a (one) new feature.'
        echo '*'
        echo '* 1. Create and develop the (one) feature. Stick to it.'
        echo "* 2. Run '${SCRIPT_NAME}' to merge it back into dev."
        ;;
      *)
        echo '* Not sure what this means (confused unga bunga).'
    esac
    echo '***'
    stdout_silent
  }

  # global constants
  declare -r SCRIPT_NAME=${0##*/}
  declare -r GREEN=2
  declare -r BLUE=4
  declare -r GITHUB='github.com'
  declare -r BITBUCKET='bitbucket.org'
  declare -r HOTFIX='hotfix'
  declare -r FEATURE='feature'
  declare -r TAG=
  declare -r FIXABLE='This appears to be fixable with the --conform option.'
  declare -r CHANGELOG_KEYWORDS='Added Changed Deprecated Removed Fixed Security'
  declare -r REFSHEADS='refs/heads'
  declare -r REFSTAGS='refs/tags'
  declare -r STABLE_ARR=(main master production prod live)
  declare -r STAGING_ARR=(staging release rc preprod)
  declare -r DEV_ARR=(dev devel develop next)
  declare USAGE
  USAGE=$(gf_usage)
  declare VERSION
  VERSION=$(gf_version)

  # global variables
  [ -t 0 ]
  declare is_stdin=${?}
  declare what_now=0
  declare dry=0
  declare entry=0
  declare stashed=0
  declare verbose=0
  declare yes=0
  declare color=auto
  declare pos_x=1
  declare pos_y=1

  # process options
  line=$(IFS=' ' getopt -n "${0}" \
    -o cehinrsvVwy\? \
    -l conform,color::,colour::,auto-entry,help,init,dry-run,request,stash,verbose,version,what-now,yes \
    -- "${@}" 2>&1) \
    || err "${line}" 2
  eval set -- "${line}"

  # load options
  stash=0
  conform=0
  init=0
  request=0
  while [[ ${#} -gt 0 ]]; do
    case ${1} in
     -c|--conform) conform=1; shift ;;
     -e|--auto-entry) entry=1; shift ;;
     --color|--colour) shift; setcolor "${1}"; shift ;;
     -s|--stash) stash=1; shift ;;
     -h|-\?|--help) echo "${USAGE}"; return ;;
     -i|--init) init=1; conform=1; shift ;;
     -n|--dry-run) dry=1; shift ;;
     -r|--request) request=1; shift ;;
     -v|--verbose) verbose=1; shift ;;
     -V|--version) echo "${VERSION}"; return ;;
     -w|--what-now) what_now=1; shift ;;
     -y|--yes) yes=1; shift ;;
      --) shift; break ;;
      *-) err "Unrecognized option '${1}'." 2 ;;
       *) break ;;
    esac
  done

  # process
  stdout_silent
  [[ ${what_now} == 1 ]] \
    && what_now \
    && exit
  gf_validate "${@}"
  [[ ${init} == 1 ]] \
    && git_checkout "${REPO_DEV}" \
    && unstash_files \
    && exit
  gf_process "${@}"
  unstash_files

}

main "${@}"
